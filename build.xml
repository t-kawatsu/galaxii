<?xml version="1.0"?>


<!-- ====================================================================== 
     Date:     January 2010
     
     Project:  Struts 2 Using Tags
     
     Author:   Bruce Phillips
     ====================================================================== -->


	
<project name="galaxii" default="deploy" basedir=".">
	
    <description>
           galaxii projects
    </description>
	
	<property environment="env"/> 

	<property file="build.properties"/>
	
	<echo message="CATALINA_HOME=${env.CATALINA_HOME}" />
	<echo message="PATH=${env.PATH}" />

	<path id="catalina-ant-classpath">
		<!-- We need the Catalina jars for Tomcat -->
		<!--  * for other app servers - check the docs --> 
		<fileset dir="${env.CATALINA_HOME}/lib">
			<include name="catalina-ant.jar"/>
			<include name="tomcat-coyote.jar"/>
			<include name="tomcat-util.jar"/>
		</fileset>
		<fileset dir="${env.CATALINA_HOME}/bin">
			<include name="tomcat-juli.jar"/>
		</fileset>
	</path>
    
	<!-- taskdefタグでタスクを宣言する。 -->
	<taskdef name="list" 
         classname="org.apache.catalina.ant.ListTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="start" 
         classname="org.apache.catalina.ant.StartTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="stop" 
         classname="org.apache.catalina.ant.StopTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="reload" 
         classname="org.apache.catalina.ant.ReloadTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="deploy" 
         classname="org.apache.catalina.ant.DeployTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="undeploy" 
         classname="org.apache.catalina.ant.UndeployTask" classpathref="catalina-ant-classpath"/>
	<taskdef name="resources" 
         classname="org.apache.catalina.ant.ResourcesTask" classpathref="catalina-ant-classpath"/>
	
	<!-- ==================== Clean Target ==================================== -->

	<!--
	  The "clean" target deletes any previous "build" and "dist" directory,
	  so that you can be ensured the application can be built from scratch.
	-->
	<target name="clean" description="Delete old build and dist directories">
		<delete dir="${dist.home}"/>
		<delete dir="${build.home}"/>
	</target>

	<!-- ==================== Init Target ================================== -->

	<!--

	  The "init" target is used to create the "build" destination directory,
	  Normally, this task is executed indirectly when needed.

	-->
	<target name="init" depends="clean"  description="Create build directory">
		
		<mkdir dir="${build.home}" />

	</target>
	
	<!-- ==================== Compile Target ================================== -->

	<!--

	  The "compile" target transforms source files (from your "src" directory)
	  into class files in the appropriate location in the build directory.
	  This example assumes that you will be including your classes in an
	  unpacked directory hierarchy under "/WEB-INF/classes".

	-->
	<target name="compile" depends="init" description="Compile Java sources">
		
		
		<mkdir dir="${build.home}/WEB-INF/classes" />
		
		<javac srcdir="${source.home}"
				destdir="${build.home}/WEB-INF/classes"
				debug="${compile.debug}"
				deprecation="${compile.deprecation}"
				optimize="${compile.optimize}"
				includeantruntime="false"
			    source="1.6" target="1.6">
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-Xlint:unchecked"/>
			<classpath>
				<path>
			    	<fileset dir="${lib.home}" />
					<fileset dir="${lib.external}" />
			    </path>
			</classpath>
			
		</javac>

	</target>
	
	<!-- ==================== Build Target ================================== -->

	<!--

	  The "build" target copies all non class files to build directory

	-->
	
	<target name="build" depends="compile" description="Copies all non Java classes to build directoy">
		<copy todir="${build.home}">
			<fileset dir="${webapp.home}" excludes="SVN,**/*.class" />
		</copy>
		<copy todir="${build.home}/WEB-INF/classes">
			<fileset dir="${source.home}" excludes="SVN,**/*.java" />
		</copy>
	</target>
	
	<!-- ==================== Archive Target ================================== -->

	<!--

	  The "archive" target create a binary archive of all files in build.home

	-->

    <target name="archive" depends="build" description="Create binary archive of all files in dist.home">
		<!-- Create resource dir sym link 
		<exec executable="/bin/ln" >
		    <arg value="-s"/>
			<arg value="${images.informaton.home}"/>
			<arg value="${webapp.home}/assets/common/images/informations"/>
		</exec>
		-->

        <mkdir dir="${dist.home}" />
        <!-- Create application WAR file -->
        <jar jarfile="${dist.home}/${app.contextpath}.war"
                basedir="${build.home}" />

    </target>   
    
    
    <target name="deploy" depends="archive" description="">
        <delete dir="${env.CATALINA_HOME}/webapps/${app.contextpath}" />
        <delete file="${env.CATALINA_HOME}/webapps/${app.contextpath}.war" />
        <copy file="${dist.home}/${app.contextpath}.war" todir="${env.CATALINA_HOME}/webapps" />
		<!--
		<symlink link="${dist.home}/ROOT/assets/user/images/community" resource="/Users/Shared/WebResources/galaxii/images/community"/>
		-->
    </target>

	<target name="reload" depends="deploy">
		<reload url="${tomcat.manager.url}"
          username="${tomcat.manager.username}"
          password="${tomcat.manager.password}"
          path="/${app.name}"/>
	</target>

</project>

